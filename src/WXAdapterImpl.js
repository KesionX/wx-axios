"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var WXCancelImpl_1 = require("./WXCancelImpl");
var WXAdapterImpl = (function () {
    function WXAdapterImpl() {
        this.wxr = wx['request'];
        this.wxr = function (obj) {
            obj = obj || {};
            return new Promise(function (resolve, reject) {
                obj.success = resolve;
                obj.fail = reject;
                var request = wx['request'](obj);
                if (obj.onRequest) {
                    obj.onRequest(request);
                }
                if (obj.cancelToken) {
                    var cancelImpl = new WXCancelImpl_1.WXCancelImpl(request);
                    obj.cancelToken(cancelImpl);
                }
            });
        };
    }
    WXAdapterImpl.prototype.get = function () {
        return null;
    };
    WXAdapterImpl.prototype.post = function () {
        return null;
    };
    WXAdapterImpl.prototype.request = function (config) {
        var url = '';
        if (config.baseUrl) {
            url = url + config.baseUrl;
        }
        if (config.url) {
            url = url + config.url;
        }
        var data = Util_1.Util.merge(config.params, config.data);
        var header = {};
        if (config.headers) {
            header = config.headers;
        }
        var mconfig = {
            url: url,
            method: config.method,
            data: data,
            header: header,
            onRequest: config.onRequest,
            cancelToken: config.cancelToken
        };
        return this.wxr(mconfig);
    };
    return WXAdapterImpl;
}());
exports.WXAdapterImpl = WXAdapterImpl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV1hBZGFwdGVySW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIldYQWRhcHRlckltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwrQkFBOEI7QUFDOUIsK0NBQThDO0FBRTlDO0lBRUk7UUFDSSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxHQUFHLFVBQVMsR0FBUTtZQUN4QixHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQztZQUNoQixPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBWSxFQUFFLE1BQVc7Z0JBQ3pDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUN0QixHQUFHLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDbEIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7b0JBQ2YsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDMUI7Z0JBQ0QsSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFO29CQUNqQixJQUFJLFVBQVUsR0FBRyxJQUFJLDJCQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzNDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQy9CO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7SUFDTixDQUFDO0lBRU0sMkJBQUcsR0FBVjtRQUNJLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSw0QkFBSSxHQUFYO1FBQ0ksT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdNLCtCQUFPLEdBQWQsVUFBZSxNQUFjO1FBQ3pCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNoQixHQUFHLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDOUI7UUFDRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDWixHQUFHLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7U0FDMUI7UUFFRCxJQUFJLElBQUksR0FBRyxXQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtRQUNmLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNoQixNQUFNLEdBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUM1QjtRQUNELElBQUksT0FBTyxHQUFHO1lBQ1YsR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDckIsSUFBSSxFQUFFLElBQUk7WUFDVixNQUFNLEVBQUUsTUFBTTtZQUNkLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztZQUMzQixXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVc7U0FDbEMsQ0FBQTtRQUVELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBQ0wsb0JBQUM7QUFBRCxDQUFDLEFBdkRELElBdURDO0FBdkRZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWRhcHRlckludGVyZmFjZSB9IGZyb20gJy4vQWRhcHRlckludGVyZmFjZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuL0NvbmZpZyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi9VdGlsJztcbmltcG9ydCB7IFdYQ2FuY2VsSW1wbCB9IGZyb20gJy4vV1hDYW5jZWxJbXBsJztcblxuZXhwb3J0IGNsYXNzIFdYQWRhcHRlckltcGwgaW1wbGVtZW50cyBBZGFwdGVySW50ZXJmYWNlIHtcbiAgICB3eHI6IGFueTtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy53eHIgPSB3eFsncmVxdWVzdCddO1xuICAgICAgICB0aGlzLnd4ciA9IGZ1bmN0aW9uKG9iajogYW55KSB7XG4gICAgICAgICAgICBvYmogPSBvYmogfHwge307XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBvYmouc3VjY2VzcyA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgb2JqLmZhaWwgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB3eFsncmVxdWVzdCddKG9iaik7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5vblJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9uUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9iai5jYW5jZWxUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2FuY2VsSW1wbCA9IG5ldyBXWENhbmNlbEltcGwocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5jYW5jZWxUb2tlbihjYW5jZWxJbXBsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KCkgOiBQcm9taXNlPE9iamVjdD4gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIHBvc3QoKSA6IFByb21pc2U8T2JqZWN0PiB8IG51bGwge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBUT0RPXG4gICAgcHVibGljIHJlcXVlc3QoY29uZmlnOiBDb25maWcpOiBQcm9taXNlPE9iamVjdD4ge1xuICAgICAgICBsZXQgdXJsID0gJyc7XG4gICAgICAgIGlmIChjb25maWcuYmFzZVVybCkge1xuICAgICAgICAgICAgdXJsID0gdXJsICsgY29uZmlnLmJhc2VVcmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy51cmwpIHtcbiAgICAgICAgICAgIHVybCA9IHVybCArIGNvbmZpZy51cmw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCBkYXRhID0gVXRpbC5tZXJnZShjb25maWcucGFyYW1zLCBjb25maWcuZGF0YSk7XG4gICAgICAgIGxldCBoZWFkZXIgPSB7fVxuICAgICAgICBpZiAoY29uZmlnLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIGhlYWRlciA9ICBjb25maWcuaGVhZGVycztcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWNvbmZpZyA9IHtcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiBjb25maWcubWV0aG9kLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGhlYWRlcjogaGVhZGVyLFxuICAgICAgICAgICAgb25SZXF1ZXN0OiBjb25maWcub25SZXF1ZXN0LFxuICAgICAgICAgICAgY2FuY2VsVG9rZW46IGNvbmZpZy5jYW5jZWxUb2tlblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMud3hyKG1jb25maWcpO1xuICAgIH1cbn0iXX0=