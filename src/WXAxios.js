"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Default_1 = require("./Default");
var Util_1 = require("./Util");
var InterceptorManager_1 = require("./InterceptorManager");
var DispatchRequest_1 = require("./DispatchRequest");
var WXAxios = (function () {
    function WXAxios() {
        this.default = new Default_1.Default();
        this.dr = new DispatchRequest_1.DispatchRequest(this.default.adapter);
        var requestInterceptor = new InterceptorManager_1.InterceptorManager();
        var responseInterceptor = new InterceptorManager_1.InterceptorManager();
        this.interceptors = {
            request: requestInterceptor,
            response: responseInterceptor
        };
    }
    WXAxios.prototype.requestWork = function (config) {
        var p = Promise.resolve(config);
        var chain;
        chain = new Array();
        chain.push(this.dr.dispatchRequest);
        chain.push(undefined);
        if (this.interceptors.request) {
            this.interceptors.request.runEach(function unshiftRequestInterceptors(interceptor) {
                chain.unshift(interceptor.fulfilled, interceptor.rejected);
            });
        }
        if (this.interceptors.response) {
            this.interceptors.response.runEach(function pushResponseInterceptors(interceptor) {
                chain.push(interceptor.fulfilled, interceptor.rejected);
            });
        }
        while (chain.length) {
            p = p.then(chain.shift(), chain.shift());
        }
        return p;
    };
    WXAxios.prototype.init = function (baseUrl) {
        this.default.baseUrl = baseUrl;
    };
    WXAxios.prototype.get = function (url, config) {
        var mConfig;
        mConfig = Util_1.Util.mergeIfNotNull(this.default, config, { url: url });
        mConfig.method = 'GET';
        return this.requestWork(mConfig);
    };
    WXAxios.prototype.delete = function (url, config) {
        var mConfig;
        mConfig = Util_1.Util.mergeIfNotNull(this.default, config, { url: url });
        mConfig.method = 'DELETE';
        return this.requestWork(mConfig);
    };
    WXAxios.prototype.head = function (url, config) {
        var mConfig;
        mConfig = Util_1.Util.mergeIfNotNull(this.default, config, { url: url });
        mConfig.method = 'HEAD';
        return this.requestWork(mConfig);
    };
    WXAxios.prototype.options = function (url, config) {
        var mConfig;
        mConfig = Util_1.Util.mergeIfNotNull(this.default, config, { url: url });
        mConfig.method = 'OPTIONS';
        return this.requestWork(mConfig);
    };
    WXAxios.prototype.post = function (url, data, config) {
        var mConfig;
        mConfig = Util_1.Util.mergeIfNotNull(this.default, config, { url: url }, { data: data });
        mConfig.method = 'POST';
        return this.requestWork(mConfig);
    };
    WXAxios.prototype.put = function (url, data, config) {
        var mConfig;
        mConfig = Util_1.Util.mergeIfNotNull(this.default, config, { url: url }, { data: data });
        mConfig.method = 'PUT';
        return this.requestWork(mConfig);
    };
    WXAxios.prototype.request = function (config) {
        var mConfig;
        mConfig = Util_1.Util.mergeIfNotNull(this.default, config);
        if (mConfig.method) {
            mConfig.method = mConfig.method.toUpperCase();
        }
        return this.requestWork(mConfig);
    };
    return WXAxios;
}());
exports.WXAxios = WXAxios;
//# sourceMappingURL=data:application/json;base64,